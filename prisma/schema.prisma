datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  User
  Admin
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String?
  emailVerified        DateTime?
  isEmailVerified      Boolean?  @default(false)
  image                String?
  hasPurchased         Boolean   @default(false)
  role                 UserRole  @default(User)
  verificationCode     String?
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  purchases Purchase[]
}

model Component {
  id            String   @id @default(uuid())
  categoryId    String
  name          String
  image         String?
  slug          String   @unique
  description   String?
  Componentpath String
  isfree        Boolean  @default(true)
  dependencies  String[]
  styling       String[]
  keywords      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  codeSnippets CodeSnippet[]

  @@index([categoryId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  components Component[]
}

model CodeSnippet {
  id          String   @id @default(uuid())
  componentId String
  fileName    String
  extension   String
  language    String
  isfree      Boolean  @default(true)
  code        String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@index([componentId])
}

model Purchase {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  date        DateTime
  address     String?
  zipCode     String?
  orderNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
